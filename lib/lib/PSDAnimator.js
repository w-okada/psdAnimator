!function(U,F){if("object"==typeof exports&&"object"==typeof module)module.exports=F();else if("function"==typeof define&&define.amd)define([],F);else{var Q=F();for(var B in Q)("object"==typeof exports?exports:U)[B]=Q[B]}}("undefined"!=typeof self?self:this,(()=>(()=>{"use strict";var U={d:(F,Q)=>{for(var B in Q)U.o(Q,B)&&!U.o(F,B)&&Object.defineProperty(F,B,{enumerable:!0,get:Q[B]})},o:(U,F)=>Object.prototype.hasOwnProperty.call(U,F),r:U=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(U,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(U,"__esModule",{value:!0})}},F={};U.r(F),U.d(F,{PSDAnimator:()=>B});class Q{}class B extends Q{constructor(U){super(),this.psdAnimation={},this.motionMode="normal",this.animationCounter=0,this.wait=30,this.waitRate=1,this.started=!1,this.imageCache={},this._generateLayerPath=(U,F)=>(F.push(U.name),U.parent&&this._generateLayerPath(U.parent,F),F),this._parsePsdFile=U=>{const F={};for(let Q=0;Q<U.layers.length;Q++){const B=U.layers[Q];F[this._generateLayerPath(B,[]).reverse().reduce(((U,F)=>0==U.length?F:`${U}_${F}`),"")]=B}return F},this.setMotion=U=>{const F={};U.forEach((U=>{for(F[U.mode]||(F[U.mode]=[]);F[U.mode].length<U.z_index+1;)F[U.mode].push([]);for(let Q=0;Q<U.number;Q++)F[U.mode][U.z_index].push(U.layer_path)})),this.psdAnimation=F},this.switchMotionMode=U=>{this.motionMode=U},this.setWaitRate=U=>{this.waitRate=U},this.stop=()=>{this.started=!1},this.start=()=>{if(this.started)return;this.started=!0;const U=async()=>{this.animationCounter=(this.animationCounter+1)%1e6;const F=this.psdAnimation[this.motionMode];if(F){const U=this.canvas.getContext("2d");U.clearRect(0,0,this.canvas.width,this.canvas.height);for(let Q=0;Q<F.length;Q++){const B=F[Q],I=B[this.animationCounter%B.length],C=this.parts[I];if(!this.imageCache[I]){const U=await C.composite(),F=new ImageData(U,C.width,C.height);let Q=null,B=null;this.canvas instanceof OffscreenCanvas?(Q=new OffscreenCanvas(C.width,C.height),B=new OffscreenCanvas(C.width*this.ratio,C.height*this.ratio)):(Q=document.createElement("canvas"),Q.width=C.width,Q.height=C.height,B=document.createElement("canvas"),B.width=C.width*this.ratio,B.height=C.height*this.ratio),Q.getContext("2d").putImageData(F,0,0),B.getContext("2d").drawImage(Q,0,0,B.width,B.height),this.imageCache[I]=B}const g=this.imageCache[I];U.drawImage(g,C.left*this.ratio,C.top*this.ratio,g.width,g.height)}}this.started&&setTimeout(U,this.wait*this.waitRate)};requestAnimationFrame(U)},this.process=U=>{const F=U;console.log("PSDAnimatorParams:",F)};const F=U;this.canvas=F.canvas,this.psdFile=F.psdFile;const Q="data:application/javascript;base64,".parse(this.psdFile);this.parts=this._parsePsdFile(Q);const B=F.maxWidth/Q.width,I=F.maxHeight/Q.height;this.ratio=Math.min(B,I),this.width=Q.width*this.ratio,this.height=Q.height*this.ratio,this.canvas.width=this.width,this.canvas.height=this.height}}return F})()));